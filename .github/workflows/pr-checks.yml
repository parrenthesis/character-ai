name: PR Checks

on:
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.8.3'
  POETRY_CACHE_DIR: ~/.cache/poetry

jobs:
  # Fast linting for PRs
  quick-lint:
    name: Quick Lint Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        env:
          POETRY_VERSION: ${{ env.POETRY_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg portaudio19-dev libsndfile1

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/poetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Setup development environment (secure architecture)
        run: make setup-ci

      - name: Run quick linting
        run: make lint

  # Fast security check for PRs
  quick-security:
    name: Quick Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        env:
          POETRY_VERSION: ${{ env.POETRY_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg portaudio19-dev libsndfile1

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/poetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Setup development environment (secure architecture)
        run: make setup-ci

      - name: Run quick security checks
        run: make security

      # Security reports not generated by current security configuration
      # - name: Upload security reports
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: security-reports-pr
      #     path: |
      #       bandit-report.json
      #       safety-report.json

  # Fast unit tests for PRs (subset)
  quick-tests:
    name: Quick Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        env:
          POETRY_VERSION: ${{ env.POETRY_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg portaudio19-dev libsndfile1

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/poetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Setup development environment (secure architecture)
        run: make setup-ci

      - name: Run quick tests
        run: make test

      # Test artifacts not generated by current test configuration
      # - name: Upload test results
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: test-results-pr
      #     path: |
      #       pytest-report.xml
      #       coverage.xml
