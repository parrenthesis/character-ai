name: Docker Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      build_models:
        description: 'Build models image (optional)'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip Docker tests (faster build)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push runtime image
  build-runtime:
    name: Build and Push Runtime Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

      - name: Test Docker image
        if: ${{ !inputs.skip_tests }}
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} python -c "import character_ai; print('✅ Import successful')"

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Build models image (optional)
  build-models:
    name: Build Models Image
    runs-on: ubuntu-latest
    if: ${{ inputs.build_models || github.event_name == 'push' }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push models image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.models
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-models:latest
          cache-from: type=gha,scope=models
          cache-to: type=gha,mode=max,scope=models

  # Cleanup and notification
  cleanup:
    name: Cleanup and Notify
    runs-on: ubuntu-latest
    needs: [build-runtime]
    if: always()

    steps:
      - name: Clean up Docker resources
        run: |
          docker system prune -f
          docker builder prune -f

      - name: Notify completion
        run: |
          if [ "${{ needs.build-runtime.result }}" == "success" ]; then
            echo "✅ Docker build completed successfully"
            echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          else
            echo "❌ Docker build failed"
            exit 1
          fi