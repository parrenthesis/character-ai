name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pull-requests: read

env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.8.3'
  POETRY_CACHE_DIR: ~/.cache/poetry

jobs:
  # Linting and Code Quality
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        env:
          POETRY_VERSION: ${{ env.POETRY_VERSION }}

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/poetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Pre-setup disk cleanup
        run: |
          # Clean up disk space before setup to prevent out of space errors
          echo "=== Pre-setup disk space ==="
          df -h

          # Aggressive system cleanup
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /var/cache/apt/archives/*
          sudo rm -rf /tmp/*
          sudo rm -rf /var/tmp/*

          # Clean Python caches aggressively
          pip cache purge || true
          find ~/.cache -type f -name "*.pyc" -delete || true
          find ~/.cache -type d -name "__pycache__" -exec rm -rf {} + || true
          find /usr -name "*.pyc" -delete 2>/dev/null || true
          find /usr -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

          # Clean GitHub Actions runner caches
          rm -rf ~/.local/share/pip/cache || true
          rm -rf ~/.cache/pip || true
          rm -rf ~/.cache/poetry || true

          # Clean up any large files
          find /home/runner -name "*.log" -size +1M -delete || true
          find /home/runner -name "*.tmp" -delete || true
          find /home/runner -name "*.cache" -delete || true

          # Clean up any large directories
          find /home/runner -type d -name "node_modules" -exec rm -rf {} + 2>/dev/null || true
          find /home/runner -type d -name ".git" -exec rm -rf {} + 2>/dev/null || true

          echo "=== Post cleanup disk space ==="
          df -h

      - name: Check disk space before setup
        run: |
          echo "=== Disk space before setup ==="
          df -h
          echo "Available space: $(df -h / | tail -1 | awk '{print $4}')"

      - name: Setup CI environment (optimized for GitHub Actions)
        run: make setup-ci

      - name: Check disk space after setup
        run: |
          echo "=== Disk space after setup ==="
          df -h
          echo "Available space: $(df -h / | tail -1 | awk '{print $4}')"

      - name: Aggressive disk cleanup after setup
        run: |
          echo "=== Aggressive cleanup after setup ==="
          # Clean up any remaining large files
          find /home/runner -name "*.log" -size +1M -delete || true
          find /home/runner -name "*.tmp" -delete || true
          find /home/runner -name "*.cache" -delete || true
          # Clean up any large directories
          find /home/runner -type d -name "node_modules" -exec rm -rf {} + 2>/dev/null || true
          find /home/runner -type d -name ".git" -exec rm -rf {} + 2>/dev/null || true
          # Clean up Python caches more aggressively
          find /usr -name "*.pyc" -delete 2>/dev/null || true
          find /usr -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          # Clean up any remaining caches
          pip cache purge || true
          poetry cache clear pypi --all || true
          # Check final disk space
          echo "=== Final disk space ==="
          df -h
          echo "Available space: $(df -h / | tail -1 | awk '{print $4}')"

      - name: Clean up disk space
        run: |
          # Check initial disk space
          echo "=== Initial disk space ==="
          df -h

          # Clean system caches
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /var/cache/apt/archives/*
          sudo rm -rf /tmp/*

          # Clean Python caches
          poetry cache clear pypi --all
          pip cache purge || true
          find ~/.cache -type f -name "*.pyc" -delete || true
          find ~/.cache -type d -name "__pycache__" -exec rm -rf {} + || true

          # Clean GitHub Actions runner caches
          rm -rf ~/.local/share/pip/cache || true
          rm -rf ~/.cache/pip || true

          # Clean up any large files
          find /home/runner -name "*.log" -size +10M -delete || true
          find /home/runner -name "*.tmp" -delete || true

          # Check final disk space
          echo "=== Final disk space ==="
          df -h
          du -sh ~/.cache/poetry || true
          du -sh ~/.cache/pip || true

      - name: Run linting checks
        run: make lint

  # Security Scanning
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        env:
          POETRY_VERSION: ${{ env.POETRY_VERSION }}

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/poetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Pre-setup disk cleanup
        run: |
          # Clean up disk space before setup to prevent out of space errors
          echo "=== Pre-setup disk space ==="
          df -h

          # Aggressive system cleanup
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /var/cache/apt/archives/*
          sudo rm -rf /tmp/*
          sudo rm -rf /var/tmp/*

          # Clean Python caches aggressively
          pip cache purge || true
          find ~/.cache -type f -name "*.pyc" -delete || true
          find ~/.cache -type d -name "__pycache__" -exec rm -rf {} + || true
          find /usr -name "*.pyc" -delete 2>/dev/null || true
          find /usr -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

          # Clean GitHub Actions runner caches
          rm -rf ~/.local/share/pip/cache || true
          rm -rf ~/.cache/pip || true
          rm -rf ~/.cache/poetry || true

          # Clean up any large files
          find /home/runner -name "*.log" -size +1M -delete || true
          find /home/runner -name "*.tmp" -delete || true
          find /home/runner -name "*.cache" -delete || true

          # Clean up any large directories
          find /home/runner -type d -name "node_modules" -exec rm -rf {} + 2>/dev/null || true
          find /home/runner -type d -name ".git" -exec rm -rf {} + 2>/dev/null || true

          echo "=== Post cleanup disk space ==="
          df -h

      - name: Check disk space before setup
        run: |
          echo "=== Disk space before setup ==="
          df -h
          echo "Available space: $(df -h / | tail -1 | awk '{print $4}')"

      - name: Minimal security setup
        run: |
          echo "=== Installing only security tools ==="
          # Install only essential dependencies
          poetry install --only main
          # Install only security tools
          poetry run pip install bandit safety --no-cache-dir
          # Check disk space
          echo "=== Disk space after security setup ==="
          df -h

      - name: Run security checks
        run: |
          echo "=== Running security checks ==="
          poetry run bandit -r src/ --severity-level medium
          poetry run safety check --short-report

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        env:
          POETRY_VERSION: ${{ env.POETRY_VERSION }}

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/poetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Pre-setup disk cleanup
        run: |
          # Clean up disk space before setup to prevent out of space errors
          echo "=== Pre-setup disk space ==="
          df -h

          # Aggressive system cleanup
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /var/cache/apt/archives/*
          sudo rm -rf /tmp/*
          sudo rm -rf /var/tmp/*

          # Clean Python caches aggressively
          pip cache purge || true
          find ~/.cache -type f -name "*.pyc" -delete || true
          find ~/.cache -type d -name "__pycache__" -exec rm -rf {} + || true
          find /usr -name "*.pyc" -delete 2>/dev/null || true
          find /usr -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

          # Clean GitHub Actions runner caches
          rm -rf ~/.local/share/pip/cache || true
          rm -rf ~/.cache/pip || true
          rm -rf ~/.cache/poetry || true

          # Clean up any large files
          find /home/runner -name "*.log" -size +1M -delete || true
          find /home/runner -name "*.tmp" -delete || true
          find /home/runner -name "*.cache" -delete || true

          # Clean up any large directories
          find /home/runner -type d -name "node_modules" -exec rm -rf {} + 2>/dev/null || true
          find /home/runner -type d -name ".git" -exec rm -rf {} + 2>/dev/null || true

          echo "=== Post cleanup disk space ==="
          df -h

      - name: Check disk space before setup
        run: |
          echo "=== Disk space before setup ==="
          df -h
          echo "Available space: $(df -h / | tail -1 | awk '{print $4}')"

      - name: Setup CI environment (optimized for GitHub Actions)
        run: make setup-ci

      - name: Check disk space after setup
        run: |
          echo "=== Disk space after setup ==="
          df -h
          echo "Available space: $(df -h / | tail -1 | awk '{print $4}')"

      - name: Aggressive disk cleanup after setup
        run: |
          echo "=== Aggressive cleanup after setup ==="
          # Clean up any remaining large files
          find /home/runner -name "*.log" -size +1M -delete || true
          find /home/runner -name "*.tmp" -delete || true
          find /home/runner -name "*.cache" -delete || true
          # Clean up any large directories
          find /home/runner -type d -name "node_modules" -exec rm -rf {} + 2>/dev/null || true
          find /home/runner -type d -name ".git" -exec rm -rf {} + 2>/dev/null || true
          # Clean up Python caches more aggressively
          find /usr -name "*.pyc" -delete 2>/dev/null || true
          find /usr -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          # Clean up any remaining caches
          pip cache purge || true
          poetry cache clear pypi --all || true
          # Check final disk space
          echo "=== Final disk space ==="
          df -h
          echo "Available space: $(df -h / | tail -1 | awk '{print $4}')"

      - name: Clean up disk space
        run: |
          # Check initial disk space
          echo "=== Initial disk space ==="
          df -h

          # Clean system caches
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /var/cache/apt/archives/*
          sudo rm -rf /tmp/*

          # Clean Python caches
          poetry cache clear pypi --all
          pip cache purge || true
          find ~/.cache -type f -name "*.pyc" -delete || true
          find ~/.cache -type d -name "__pycache__" -exec rm -rf {} + || true

          # Clean GitHub Actions runner caches
          rm -rf ~/.local/share/pip/cache || true
          rm -rf ~/.cache/pip || true

          # Clean up any large files
          find /home/runner -name "*.log" -size +10M -delete || true
          find /home/runner -name "*.tmp" -delete || true

          # Check final disk space
          echo "=== Final disk space ==="
          df -h
          du -sh ~/.cache/poetry || true
          du -sh ~/.cache/pip || true

      - name: Run unit tests
        run: make test

      - name: Run test coverage
        run: make test-coverage

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, security, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        env:
          POETRY_VERSION: ${{ env.POETRY_VERSION }}

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/poetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Pre-setup disk cleanup
        run: |
          # Clean up disk space before setup to prevent out of space errors
          echo "=== Pre-setup disk space ==="
          df -h

          # Aggressive system cleanup
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /var/cache/apt/archives/*
          sudo rm -rf /tmp/*
          sudo rm -rf /var/tmp/*

          # Clean Python caches aggressively
          pip cache purge || true
          find ~/.cache -type f -name "*.pyc" -delete || true
          find ~/.cache -type d -name "__pycache__" -exec rm -rf {} + || true
          find /usr -name "*.pyc" -delete 2>/dev/null || true
          find /usr -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

          # Clean GitHub Actions runner caches
          rm -rf ~/.local/share/pip/cache || true
          rm -rf ~/.cache/pip || true
          rm -rf ~/.cache/poetry || true

          # Clean up any large files
          find /home/runner -name "*.log" -size +1M -delete || true
          find /home/runner -name "*.tmp" -delete || true
          find /home/runner -name "*.cache" -delete || true

          # Clean up any large directories
          find /home/runner -type d -name "node_modules" -exec rm -rf {} + 2>/dev/null || true
          find /home/runner -type d -name ".git" -exec rm -rf {} + 2>/dev/null || true

          echo "=== Post cleanup disk space ==="
          df -h

      - name: Check disk space before setup
        run: |
          echo "=== Disk space before setup ==="
          df -h
          echo "Available space: $(df -h / | tail -1 | awk '{print $4}')"

      - name: Setup CI environment (optimized for GitHub Actions)
        run: make setup-ci

      - name: Check disk space after setup
        run: |
          echo "=== Disk space after setup ==="
          df -h
          echo "Available space: $(df -h / | tail -1 | awk '{print $4}')"

      - name: Aggressive disk cleanup after setup
        run: |
          echo "=== Aggressive cleanup after setup ==="
          # Clean up any remaining large files
          find /home/runner -name "*.log" -size +1M -delete || true
          find /home/runner -name "*.tmp" -delete || true
          find /home/runner -name "*.cache" -delete || true
          # Clean up any large directories
          find /home/runner -type d -name "node_modules" -exec rm -rf {} + 2>/dev/null || true
          find /home/runner -type d -name ".git" -exec rm -rf {} + 2>/dev/null || true
          # Clean up Python caches more aggressively
          find /usr -name "*.pyc" -delete 2>/dev/null || true
          find /usr -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          # Clean up any remaining caches
          pip cache purge || true
          poetry cache clear pypi --all || true
          # Check final disk space
          echo "=== Final disk space ==="
          df -h
          echo "Available space: $(df -h / | tail -1 | awk '{print $4}')"

      - name: Clean up disk space
        run: |
          # Check initial disk space
          echo "=== Initial disk space ==="
          df -h

          # Clean system caches
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /var/cache/apt/archives/*
          sudo rm -rf /tmp/*

          # Clean Python caches
          poetry cache clear pypi --all
          pip cache purge || true
          find ~/.cache -type f -name "*.pyc" -delete || true
          find ~/.cache -type d -name "__pycache__" -exec rm -rf {} + || true

          # Clean GitHub Actions runner caches
          rm -rf ~/.local/share/pip/cache || true
          rm -rf ~/.cache/pip || true

          # Clean up any large files
          find /home/runner -name "*.log" -size +10M -delete || true
          find /home/runner -name "*.tmp" -delete || true

          # Check final disk space
          echo "=== Final disk space ==="
          df -h
          du -sh ~/.cache/poetry || true
          du -sh ~/.cache/pip || true

      - name: Run integration tests
        run: make test

  # Release Management (Docker builds moved to separate workflow)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint, security, test, integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          git log --oneline --since="$(git describe --tags --abbrev=0 2>/dev/null || echo 'HEAD~10')" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.changelog }}

            ## Docker Images
            Docker images will be built automatically via the Docker Publish workflow.
            Use `make runtime-image` locally for development.
          draft: false
          prerelease: false
