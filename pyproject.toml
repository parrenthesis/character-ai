[tool.poetry]
name = "character-ai"
version = "1.0.1"
description = "Edge-first AI character platform for toys (offline, low-latency)"
authors = ["parrenthesis"]
readme = "README.md"
license = "Apache-2.0"
packages = [{include = "character_ai", from = "src"}]

[tool.poetry.scripts]
cai = "character_ai.cli.main:cli"

[tool.poetry.dependencies]
python = ">=3.10,<3.12"
# Core dependencies aligned with Coqui TTS constraints
pydantic = "^2.0.0"
pydantic-core = "^2.0.0"
# numpy = "==1.22.0"  # Installed via Makefile due to TTS conflicts
# pandas = ">=1.4,<2.0"  # Replaced with version below
psutil = ">=5.9.0,<8.0.0"
structlog = "^23.0.0"
tenacity = "^8.2.0"
diskcache = "^5.6.0"

# ML/AI frameworks (updated for security - Phase 2 Complete)
# SECURE ARCHITECTURE: PyTorch 2.8.0 + Wav2Vec2 + Coqui TTS + 1092 tests passing
torch = ">=2.8.0"  # SECURE VERSION: All PyTorch vulnerabilities resolved (CVE-2025-32434, CVE-2025-3730, CVE-2025-2953)
                   # Architecture: Wav2Vec2 (STT) + Coqui TTS (TTS + Voice Cloning)
transformers = "4.45.0"  # Pinned for XTTS v2 compatibility (known working version)
accelerate = "^0.20.0"
datasets = "^2.15.0"
fsspec = "==2024.6.1"  # Compatible with datasets
networkx = "==2.8.8"  # Compatible with gruut
sentencepiece = "^0.1.99"

# Audio processing
librosa = "^0.10.0"
soundfile = "^0.12.1"
sounddevice = "^0.4.6"  # Real-time audio I/O for microphone/speaker (requires portaudio19-dev)
torchaudio = ">=2.8.0"  # SECURE VERSION: Updated to match torch 2.8.0+
pydub = "^0.25.1"  # Simple audio manipulation for speed control
# scipy = "^1.10.0"  # Installed via Makefile due to complex conflicts
llvmlite = "==0.42.0"  # Compatible with numpy 1.22.0
numba = "==0.59.1"  # Compatible with numpy 1.22.0
# scipy = ">=1.11.2,<1.12.0"  # Installed via Makefile due to TTS conflicts
soxr = "^1.0.0"  # Moved from Makefile
# pandas = "^1.4.0"  # Moved back to Makefile due to compiled extensions
pandas = "^1.4.0"  # Moved from Makefile
matplotlib = "^3.8.0"  # Moved from Makefile
regex = "^2025.0.0"  # Updated for security

# Speech + TTS (Phase 2 Complete - Native Voice Cloning)
TTS = "==0.21.3"  # Coqui TTS - native voice cloning
# llama-cpp-python installed via pip in Makefile due to build requirements

# Voice cloning now native with Coqui TTS (no container required)

# Template engine for prompts
jinja2 = "^3.1.0"

# Table formatting for CLI output
tabulate = "^0.9.0"

# Web framework and API
fastapi = "^0.116.0"  # Updated to support Starlette 0.47.2
uvicorn = {extras = ["standard"], version = "^0.23.0"}
websockets = "^11.0.0"
httpx = "^0.27.0"  # Updated to support newer h11/anyio
aiofiles = "^23.0.0"
python-multipart = "^0.0.18"

# Security and authentication
PyJWT = "^2.8.0"
cryptography = "^41.0.0"

# Network security updates
h11 = "^0.16.0"  # Updated for CVE-2025-43859
anyio = "^4.4.0"  # Updated for PVE-2024-71199

# Web framework security updates
starlette = "^0.47.2"  # Updated for CVE-2025-54121, CVE-2024-47874, PVE-2024-68094

# CLI and UI
typer = "^0.9.0"
rich = "^13.0.0"

# Monitoring
prometheus-client = "^0.17.0"
torchcodec = "^0.8.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.0"
pytest-benchmark = "^4.0.0"
black = "^24.3.0"
isort = "^5.12.0"
mypy = "^1.5.0"
ruff = "^0.0.284"
bandit = "^1.7.5"
detect-secrets = "^1.4.0"
pre-commit = "^3.4.0"
types-PyYAML = "^6.0.0"
types-psutil = "^5.9.0"
types-requests = "^2.31.0"
types-tabulate = "^0.9.0"
toml = "^0.10.2"


# Note: Coqui TTS has better numpy compatibility
# Poetry can't resolve this conflict, so we use pip to override after poetry install
safety = "2.3.4"
types-aiofiles = "^24.1.0.20250822"

[tool.poetry.extras]
# TTS backends
tts-full = ["TTS"]
tts-coqui = ["TTS"]
# Audio processing
audio = ["librosa", "soundfile", "torchaudio", "scipy"]
# ML models
ml = ["torch", "transformers", "accelerate", "datasets"]
# Security and authentication
security = ["PyJWT", "cryptography"]
# All optional dependencies
all = ["TTS", "librosa", "soundfile", "torchaudio", "scipy", "torch", "transformers", "accelerate", "datasets"]
llama_cpp = ["llama-cpp-python"]


[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/character.ai",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=95",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "algorithms: marks tests that require algorithm dependencies",
    "production: marks tests that require production dependencies",
    "audio: marks tests that require audio processing",
    "conversational_ai: marks tests for conversational AI components",
    "benchmark: marks tests as benchmarks",
    "performance: marks tests as performance tests",
    "ml: marks tests that require ML dependencies",
    "speech: marks tests that require speech processing",
    "tts: marks tests that require TTS",
    "coqui: marks tests that require Coqui TTS",
    "llm: marks tests that require language models",
    "web: marks tests that require web framework",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/character.ai"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py310', 'py311']
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["character_ai"]
force_to_top = ["character_ai.core.torch_init"]  # CRITICAL: Keep torch_init first

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "librosa.*",
    "soundfile.*",
    "TTS.*",
    "coqui.*",
    "wav2vec2.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 88
target-version = "py310"
select = ["E", "F", "W"]  # Only basic errors, warnings, and pyflakes
ignore = ["E501"]  # Line too long - handled by black
